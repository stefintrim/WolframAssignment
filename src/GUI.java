import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.IOException;

import javax.swing.JOptionPane;

/*
 * GCD Student Number: 2866113
 * F / S Name: Stefan Compton
 * Email: stefancompton23@gmail.com
 *
 * GUI class that uses a JFrame to draw a GUI version of the program
 * uses mostly the same code from Assignment.java
 */
@SuppressWarnings("serial") // JFrame wants to create a version ID - suppress compiler warning that it is missing

public class GUI extends javax.swing.JFrame {
	
	// Variable declarations for components and panels                     
    private javax.swing.JTextField inputBox;
    private javax.swing.JTextArea outputField;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField titleField;
    private javax.swing.JPanel titlePanel;
    
    // a custom type Answer
    Answer answer;
    

    /**
     * Creates new form frame
     */
    public GUI() {
    	// iniitialise components
        initComponents();
        
        // make sure the window comes to the front
        this.setAlwaysOnTop(true);
        
        // make it visible
        this.setVisible(true);
        
        // put it back so that the popup will be visible
        this.setAlwaysOnTop(false);
    }

    /**
     * constructor code, partly generated by netbeans IDE for the form layout
     */
    private void initComponents() {
    	// components
    	titlePanel = new javax.swing.JPanel();
        titleField = new javax.swing.JTextField();
        searchPanel = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        inputBox = new javax.swing.JTextField();
        outputField = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(50, 50, 50));
        setMaximumSize(new java.awt.Dimension(500, 300));
        setName("frame"); // NOI18N
        setResizable(false);
        // interface code for a flat, modern style such as on a smartphone OS
        titlePanel.setBackground(new java.awt.Color(41, 128, 185));
        titlePanel.setForeground(new java.awt.Color(236, 240, 241));

        titleField.setEditable(false);
        titleField.setBackground(new java.awt.Color(41, 128, 185));
        titleField.setFont(new java.awt.Font("Segoe UI", 0, 30)); // NOI18N
        titleField.setForeground(new java.awt.Color(236, 240, 241));
        titleField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        titleField.setText("Wolfram Alpha Search App");
        titleField.setBorder(null);
        

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, titlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleField, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleField, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                .addContainerGap())
        );

        searchPanel.setBackground(new java.awt.Color(236, 240, 241));

        // the button to search
        searchButton.setBackground(new java.awt.Color(236, 240, 241));
        searchButton.setForeground(new java.awt.Color(41, 128, 185));
        searchButton.setText("Search");
        searchButton.setBorder(null);
        searchButton.setBorderPainted(false);
        searchButton.setOpaque(false);
        // button click handler with anonymouse inner class
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					buttonHandler();
				} catch (IOException e) {
					System.out.println(e);
				}
            }
        });
        // the text input box
        inputBox.setBackground(new java.awt.Color(236, 240, 241));
        inputBox.setForeground(new java.awt.Color(41, 128, 185));
        inputBox.setText("Enter your question here");
        inputBox.setBorder(null);
        inputBox.setOpaque(false);
        
        
        // when the text box gets focus, delete the prompt text - uses an anonymous inner class
        inputBox.addFocusListener(new FocusListener() {

			@Override
			public void focusGained(FocusEvent arg0) {
				inputBox.setText("");
				
			}

			@Override
			public void focusLost(FocusEvent arg0) {
				
				
			}
			
		});
        
        // when you press enter on the text box - calls the same method as clicking search
        // try catch for IO exception because of code called in Assignment class
        inputBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					buttonHandler();
				} catch (IOException e) {
					System.out.println(e);
				}
            }
        });

        // the large output area at the bottom
        outputField.setEditable(false);
        outputField.setBackground(new java.awt.Color(236, 240, 241));
        outputField.setColumns(20);
        outputField.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        outputField.setForeground(new java.awt.Color(41, 128, 185));
        outputField.setLineWrap(true);
        outputField.setRows(5);
        outputField.setText("Type your question above and click search.");
        outputField.setWrapStyleWord(true);
        outputField.setBorder(null);
        outputField.setName("outputField"); // NOI18N

        // lots of layout code 
        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(searchPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(outputField, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputBox, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(512, Short.MAX_VALUE))
            .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                    .addContainerGap(30, Short.MAX_VALUE)
                    .addComponent(outputField, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(titlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }                       

                                            

	public void buttonHandler() throws IOException {
		// handler for when the search button is clicked
		// or enter is pressed 
		
		// store the contents of the text box
		String userInput = inputBox.getText();
		
		// remove leading and trailing spaces 
		userInput = userInput.trim(); 
		
		// check if search was hit (or enter pressed) without a question - do nothing if they have
		if (!userInput.equals("") && !userInput.equals("Enter your question here...")) {
			
			// ensure question mark is present at the end of the question for consistency
			if (!userInput.endsWith("?")) userInput += "?";
			
			// check has the question been asked
			int counter = Assignment.questionHasBeenAsked(userInput);
			
			// if asked before
			if (counter > -1) {
				// get the timestamp from file
				long timeStamp = Assignment.getTime(counter);
				
				// get the difference between now and the timestamp
				// in String form and easily digested (yesteday, 3 days ago, 2 hours ago etc)
				String timeDiff = Assignment.getTimeDifference(timeStamp);
				
				// show cached answer
				outputField.setText(Assignment.getCachedQuestion(counter));
				
				
				// offer cached response (popup) - returns 0 for yes
				int choice = JOptionPane.showConfirmDialog(this, "This is a cached answer from " + timeDiff + " Would you me to get a more recent answer from Wolfram Alpha?", "Use Cached Response?", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);

				if (choice == 0) {
					// if the user wants to search again
					// delete the cached answer in all 3 files 
					Assignment.deleteLine(counter);
					
					// set counter to -1 so that we search again and repopulate cache files
					counter = -1;
				}
				
			}
			
			if (counter == -1) {
			
			
				// query WA
				answer = Assignment.queryWA(inputBox.getText());
				
				// create a reply to be displayed to the user
				String response = "";
				response += Assignment.generateResponse(answer.getResponseType()) + "\n";
				response += answer.getAnswer(); 
				outputField.setText(response);
				
				// write the files
				Assignment.writeToFiles(userInput, answer);
				
				// clear the search from the text box
				inputBox.setText("");
			}
			
		}
		
	}                                       

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

    	// test client - instantiate a GUI
    	new GUI();
    }

                     
}
